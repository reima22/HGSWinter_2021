//==============================================================================
//
// サイン(指示)描画処理〔sign.cpp〕
// Author : Mare Horiai
//
//==============================================================================
#include "main.h"
#include "scene2D.h"
#include "renderer.h"
#include "manager.h"
#include "sign.h"

//==============================================================================
// コンストラクタ
//==============================================================================
CSign::CSign(int nPriority) : CScene(nPriority)
{
}

//==============================================================================
// デストラクタ
//==============================================================================
CSign::~CSign()
{
}

//==============================================================================
// サインの初期化処理
//==============================================================================
HRESULT CSign::Init(void)
{
	// 初期化
	if (m_pScene2D == NULL)
	{
		m_pScene2D = new CScene2D;
		m_pScene2D->Init();
		m_pScene2D->SetPosition(SCREEN_CENTER);
		m_pScene2D->SetSize(VECTOR2_NULL);
		//m_pScene2D->BindTexture("");
		m_pScene2D->SetTex(1, 1, 0, 0, 0.0f, 0.0f);
	}

	return S_OK;
}

//==============================================================================
// サインの終了処理
//==============================================================================
void CSign::Uninit(void)
{
	// ポリゴンの破棄
	if (m_pScene2D != NULL)
	{
		m_pScene2D->Uninit();
		m_pScene2D = NULL;
	}

	Release();
}

//==============================================================================
// サインの更新処理
//==============================================================================
void CSign::Update(void)
{

}

//==============================================================================
// サインの描画処理
//==============================================================================
void CSign::Draw(void)
{

}

//==============================================================================
// サインの生成処理
//==============================================================================
CSign *CSign::Create(void)
{
	// インスタンス生成
	CSign *pSign;
	pSign = new CSign;

	// 初期化
	if (pSign != NULL)
	{
		pSign->Init();
	}

	return pSign;
}

//==============================================================================
// サインの挙動
//==============================================================================
void CSign::SignEffect(void)
{
	// 状態ごとの挙動
	switch (m_signPhase)
	{
	case SIGNPHASE_WAIT:		// 待機状態
		break;

	case SIGNPHASE_ACTIVE:		// 入力可能状態
		break;

	//case SIGNPHASE_DUMMY:		// 偽の入力
	//	break;

	case SIGNPHASE_INTERVAL:	// 入力間隔
		break;
	}
}